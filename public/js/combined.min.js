
      /*************************/
     /*                       */
    /*      THREE JS         */
   /*                       */
  /*************************/
  function load3D(data,container,verticalScale) {

    var model3Dobj= {data:data.coords, verticalScale:verticalScale};
    var maxDim= Math.max(data.width,data.height);

    var W,H;

    var camera, scene, renderer, dirLight, hemiLight, parent;


    var targetRotationX = Math.PI/4;
    var targetRotationXOnMouseDown = 0;

    var mouseX = 0;
    var mouseXOnMouseDown = 0;

    var targetRotationY = Math.PI/8;
    var targetRotationYOnMouseDown = 0;

    var mouseY = 0;
    var mouseYOnMouseDown = 0;

    var camerazoom=35;

    var windowHalfX = 0;
    var windowHalfY = 0;
    slicesObjs=[];




    model3Dobj.setVerticalScale= function(vs) {
      model3Dobj.verticalScale=vs;

      for (var i = 0; i< slicesObjs.length; i++) {
        parent.remove( slicesObjs[i] );
      }

      slicesObjs.length=0;
      model3Dobj.renderSlices();

    };


    model3Dobj.setRotation= function(rotX,rotY) {
      rotY = defaultParam(rotY,targetRotationY);
      targetRotationX=rotX;
      targetRotationY=rotY;
    };



    model3Dobj.addShape= function( shape, x, y, z, rx, ry, rz ) {

          var scale=300;
          var extrudeSettings = { amount: 0.2/scale ,  steps: 1 , bevelSegments: 1, bevelSize: 0.2/scale, bevelThickness:0.2/scale };
          var color = 0xffffff;
          var material= new THREE.MeshLambertMaterial( { color: color } );
          var geometry = new THREE.ExtrudeGeometry( shape, extrudeSettings );

          var mesh= new THREE.Mesh( geometry, material );
          mesh.scale.set( scale, scale, scale );
          mesh.position.set( x*scale, y*scale, z*scale );
          mesh.rotation.set( rx, ry, rz );
          mesh.castShadow = true;
          mesh.receiveShadow = true;
          parent.add( mesh );
          slicesObjs.push(mesh);



        };


    model3Dobj.renderSlices= function() {
        // Slices

        var slicePts, sl;

          for (var i = 0; i< model3Dobj.data.h.length; i++) {
            slicePts = [ new THREE.Vector2 ( data.width/maxDim, 0 ), new THREE.Vector2 ( 0, 0 )];
            sl=model3Dobj.data.h[i];
            for (var n = 0; n<sl.c.length; n++)  slicePts.push( new THREE.Vector2 ( sl.c[n][0], sl.c[n][1]*model3Dobj.verticalScale+0.1 ) );
            var sliceShape = new THREE.Shape( slicePts );
            var dx= -(data.width/maxDim)/2;
            var dy= -0.1;
            var dz= -(data.height/maxDim)/2 + (i+1)*(data.height/maxDim) / ( model3Dobj.data.h.length+1 );

            model3Dobj.addShape( sliceShape, dx, dy, dz, 0, 0, 0 );
          }

          for ( i = 0; i< model3Dobj.data.v.length; i++) {
            slicePts = [ new THREE.Vector2 ( data.height/maxDim, 0 ), new THREE.Vector2 ( 0, 0 )];
            sl=model3Dobj.data.v[i];
            for (var n = 0; n<sl.c.length; n++)  slicePts.push( new THREE.Vector2 ( sl.c[n][0], sl.c[n][1]*model3Dobj.verticalScale+0.1 ) );
            var sliceShape = new THREE.Shape( slicePts );
            var dx= (data.height/maxDim)/2;
            var dy= -0.1;
            var dz= (data.width/maxDim)/2- (i+1)*(data.width/maxDim)/(model3Dobj.data.v.length+1);
            model3Dobj.addShape( sliceShape, dz, dy, -dx, 0, -Math.PI/2, 0 );
          }

    };


    model3Dobj.init= function() {

        W = container.width();
        H = container.height();

        windowHalfX = W/2;
        windowHalfY = H/2;

        renderer = new THREE.WebGLRenderer( { antialias: true } );
        renderer.setSize( W, H );

        renderer.physicallyBasedShading = true;

        renderer.shadowMapEnabled = true;
        renderer.shadowMapCullFace = THREE.CullFaceBack;

        container[0].appendChild( renderer.domElement );

        camera = new THREE.PerspectiveCamera( 50, W / H, 1, 1000 );
        camera.position.set( 0, 150, 500 );

        camera.setLens(camerazoom);

        scene = new THREE.Scene();
      /*
        scene.fog = new THREE.Fog( 0xfafafa, 1000, 10000 );
        scene.fog.color.setHSV( 0.6, 0.125, 1 );
      */

      // LIGHTS

        dirLight1 = new THREE.DirectionalLight( 0xffffff, 0.4 );

        dirLight1.position.set( 1, 0, 1 );
        dirLight1.position.multiplyScalar( 500 );
        scene.add( dirLight1 );


        //

        dirLight = new THREE.DirectionalLight( 0xffffff, 1 );

        dirLight.position.set( -1, 1, 1 );
        dirLight.position.multiplyScalar( 500 );
        scene.add( dirLight );

        dirLight.castShadow = true;

        dirLight.shadowMapWidth = 2048;
        dirLight.shadowMapHeight = 2048;

        var d = 500;

        dirLight.shadowCameraLeft = -d;
        dirLight.shadowCameraRight = d;
        dirLight.shadowCameraTop = d;
        dirLight.shadowCameraBottom = -d;

        dirLight.shadowCameraFar = 3500;
        dirLight.shadowBias = -0.0001;
        dirLight.shadowDarkness = 0.10;



        parent = new THREE.Object3D();
        parent.position.y = 100;
        scene.add( parent );




        model3Dobj.renderSlices();

        container[0].addEventListener( 'mousedown', model3Dobj.onDocumentMouseDown, false );
        container[0].addEventListener( 'touchstart', model3Dobj.onDocumentTouchStart, false );
        container[0].addEventListener( 'touchmove', model3Dobj.onDocumentTouchMove, false );

        container[0].addEventListener( 'mousewheel', model3Dobj.mousewheel, false );
        container[0].addEventListener( 'DOMMouseScroll', model3Dobj.mousewheel, false ); // firefox

        //

        window.addEventListener( 'resize', model3Dobj.onWindowResize, false );

      };// fin init



      model3Dobj.onWindowResize= function() {

        W = container.width();
        H = container.height();

        windowHalfX = W / 2;
        windowHalfY = H / 2;

        camera.aspect = W / H;
        camera.updateProjectionMatrix();

        renderer.setSize( W, H );

      };

      //

      model3Dobj.onDocumentMouseDown= function( event ) {

        event.preventDefault();

        container[0].addEventListener( 'mousemove', model3Dobj.onDocumentMouseMove, false );
        container[0].addEventListener( 'mouseup', model3Dobj.onDocumentMouseUp, false );
        container[0].addEventListener( 'mouseout', model3Dobj.onDocumentMouseOut, false );

        mouseXOnMouseDown = event.clientX - windowHalfX;
        targetRotationXOnMouseDown = targetRotationX;

        mouseYOnMouseDown = event.clientY - windowHalfY;
        targetRotationYOnMouseDown = targetRotationY;

      };

      model3Dobj.onDocumentMouseMove= function( event ) {

        mouseX = event.clientX - windowHalfX;
        mouseY = event.clientY - windowHalfY;

        targetRotationX = targetRotationXOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.02;
        targetRotationY = targetRotationYOnMouseDown + ( mouseY - mouseYOnMouseDown ) * 0.02;

      };

      model3Dobj.onDocumentMouseUp= function( event ) {

        container[0].removeEventListener( 'mousemove', model3Dobj.onDocumentMouseMove, false );
        container[0].removeEventListener( 'mouseup', model3Dobj.onDocumentMouseUp, false );
        container[0].removeEventListener( 'mouseout', model3Dobj.onDocumentMouseOut, false );

      };

      model3Dobj.onDocumentMouseOut= function( event ) {

        container[0].removeEventListener( 'mousemove', model3Dobj.onDocumentMouseMove, false );
        container[0].removeEventListener( 'mouseup', model3Dobj.onDocumentMouseUp, false );
        container[0].removeEventListener( 'mouseout', model3Dobj.onDocumentMouseOut, false );

      };

      model3Dobj.onDocumentTouchStart= function( event ) {

        if ( event.touches.length == 1 ) {

          event.preventDefault();

          mouseXOnMouseDown = event.touches[ 0 ].pageX - windowHalfX;
          targetRotationXOnMouseDown = targetRotationX;

          mouseYOnMouseDown = event.touches[ 0 ].pageY - windowHalfY;
          targetRotationYOnMouseDown = targetRotationY;

        }

      };

      model3Dobj.onDocumentTouchMove= function( event ) {

        if ( event.touches.length == 1 ) {

          event.preventDefault();

          mouseX = event.touches[ 0 ].pageX - windowHalfX;
          targetRotationX = targetRotationXOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.05;

          mouseY = event.touches[ 0 ].pageY - windowHalfY;
          targetRotationY = targetRotationYOnMouseDown + ( mouseY - mouseYOnMouseDown ) * 0.05;

        }

      };


      model3Dobj.mousewheel= function( event ) {


          event.preventDefault();
          event.stopPropagation();

          var delta = 0;

          if ( event.wheelDelta ) { // WebKit / Opera / Explorer 9

            delta = event.wheelDelta / 40;

          } else if ( event.detail ) { // Firefox

            delta = - event.detail / 3;

          }

          camerazoom += ( 1 / delta ) * 5;
          if (camerazoom<1) camerazoom=1;

          camera.setLens(camerazoom);

        };

      //

       model3Dobj.animate=function() {

        requestAnimationFrame( model3Dobj.animate );
        model3Dobj.render();

      };

       model3Dobj.render=function() {

        parent.rotation.y += ( targetRotationX - parent.rotation.y ) * 0.05;
        parent.rotation.x += ( targetRotationY - parent.rotation.x ) * 0.05;

        if (parent.rotation.x<-Math.PI/4) parent.rotation.x=-Math.PI/4;
        if (parent.rotation.x>Math.PI/2)  parent.rotation.x=Math.PI/2;


        renderer.render( scene, camera );

      };


      model3Dobj.init();
      model3Dobj.animate();

      return model3Dobj;
  }/*******************/
 /*   initIndex    */
/*******************/

  Georigami.initWelcome = function() {
  	$('.carousel').carousel().carousel('pause');
  }
var map;
var elevator;
var infowindow;







draggableRectangle= function( map, lat, lng, width, height, options ) {

    var DR={ lat: lat, lng: lng, width: width, height: height };
    var center= new google.maps.LatLng( lat , lng );
    var updateSizeFromRect=true;
    var changeFunction= function(){};
    if (options.onChange!==null) changeFunction=options.onChange;

    

    DR.getBounds= function(returnStr) {
        if (returnStr==null) returnStr=false;
        var e= google.maps.geometry.spherical.computeOffset(center, DR.width/2, 90);
        var s= google.maps.geometry.spherical.computeOffset(center, DR.height/2, 180);
        var n= google.maps.geometry.spherical.computeOffset(center, DR.height/2, 0);
        var w= google.maps.geometry.spherical.computeOffset(center, DR.width/2, -90);
        
        if (returnStr) return w.lng() + ',' + s.lat() + ',' + e.lng() + ',' + n.lat();
          else return new google.maps.LatLngBounds( new google.maps.LatLng( n.lat() , w.lng() ), new google.maps.LatLng( s.lat() , e.lng() ) );
    }
  

    DR.updateCenter=function(lat, lng) {
        updateSizeFromRect=false;
        center= new google.maps.LatLng( lat , lng );
        DR.lat=lat;
        DR.lng=lng;
        DR.bounds=DR.getBounds();
        rectangle.setOptions({bounds: DR.bounds });

        marker.setPosition(center);        
    }

    DR.updateDimensions=function(width, height) {
        updateSizeFromRect=false;
        DR.width=width;
        DR.height=height;
        DR.bounds=DR.getBounds();
        rectangle.setOptions({bounds: DR.bounds });       
    }


    if (options==null) options={};
    if (options.strokeColor==null)   options.strokeColor="#000000";
    if (options.strokeOpacity==null) options.strokeOpacity=0;
    if (options.strokeWeight==null)  options.strokeWeight=2;
    if (options.fillColor==null)     options.fillColor="#000000";
    if (options.fillOpacity==null)   options.fillOpacity=0;
    options.editable= true;
    DR.bounds=DR.getBounds();
    options.bounds= DR.bounds;

    var rectangle = new google.maps.Rectangle(options);
    rectangle.setMap(map);

    var icon = new google.maps.MarkerImage(Georigami.baseurl+"/img/hang.png", null, null, new google.maps.Point(8, 8));
    var marker = new google.maps.Marker({ map: map, position: center, draggable: true, icon: icon, raiseOnDrag:false, zIndex: 10002});
    marker.setAnimation(null);
    
    google.maps.event.addListener(marker, 'drag', function(event) {
          DR.updateCenter( event.latLng.lat() , event.latLng.lng() );
          changeFunction();
        });

    google.maps.event.addListener(rectangle, 'bounds_changed', function() {
      DR.bounds= rectangle.getBounds();
      center= DR.bounds.getCenter();
      DR.lat= center.lat();
      DR.lng= center.lng();
      marker.setPosition(center);  

      if (updateSizeFromRect) {
        var ne= DR.bounds.getNorthEast();
        var sw= DR.bounds.getSouthWest();
        DR.height=  Math.round( google.maps.geometry.spherical.computeDistanceBetween( new google.maps.LatLng( ne.lat() , DR.lng ) , new google.maps.LatLng( sw.lat() , DR.lng ) ));
        DR.width=   Math.round( google.maps.geometry.spherical.computeDistanceBetween( new google.maps.LatLng( DR.lat , ne.lng() ) , new google.maps.LatLng( DR.lat , sw.lng() ) ));
        changeFunction();
      }
      else updateSizeFromRect=true;                
    });

    google.maps.event.addListener(map, 'click', function(event) {
          DR.updateCenter( event.latLng.lat() , event.latLng.lng() );
          changeFunction();


        });
        
    return DR
};












function createMarker(name, latlng, icon, shadow) {

    var options={position: latlng, map: map};
    
    if (icon!=null) options.icon=new google.maps.MarkerImage(icon,
        new google.maps.Size(18.0, 28.0),
        new google.maps.Point(0, 0),
        new google.maps.Point(9.0, 28.0)
    );

    if (shadow!=null) options.shadow=new google.maps.MarkerImage(
        shadow,
        new google.maps.Size(33.0, 28.0),
        new google.maps.Point(0, 0),
        new google.maps.Point(9.0, 28.0)
    );;

    var marker = new google.maps.Marker(options);
    google.maps.event.addListener(marker, "click", function() {
      if (infowindow) infowindow.close();
      infowindow = new google.maps.InfoWindow({content: name});
      infowindow.open(map, marker);
    });
    google.maps.event.addListener(marker, "mouseover", function() {
      /*marker.setAnimation(google.maps.Animation.BOUNCE);
      setTimeout(function(){marker.setAnimation(null)}, 750*3);*/
    });
    marker.setAnimation(google.maps.Animation.DROP);
    return marker;
  }












function grid(map,lat,lng,width,height,vSlices,hSlices,rotate) {

  if (rotate==null) rotate=0;
  rotate=parseFloat(rotate);
	var grid={ lat:lat, lng:lng, width:width, height:height, vSlices:vSlices, hSlices:hSlices, rotate:rotate };
	var slices=[];
	var slicesData=[];
	var cadre=null;	   


       
	var center= new google.maps.LatLng( lat , lng );    

    grid.NE= google.maps.geometry.spherical.computeOffset( google.maps.geometry.spherical.computeOffset(center, height/2, 0+rotate),   width/2, 90+rotate); // NE
    grid.SE= google.maps.geometry.spherical.computeOffset( google.maps.geometry.spherical.computeOffset(center, height/2, 180+rotate), width/2, 90+rotate); // SE
    grid.NW= google.maps.geometry.spherical.computeOffset( google.maps.geometry.spherical.computeOffset(center, height/2, 0+rotate),   width/2, -90+rotate); // NW
    grid.SW= google.maps.geometry.spherical.computeOffset( google.maps.geometry.spherical.computeOffset(center, height/2, 180+rotate), width/2, -90+rotate); // SW


    cadre = new google.maps.Polygon({
              path: [grid.NE,grid.SE,grid.SW,grid.NW],
              strokeColor: "#000000",
              strokeOpacity: 1.0,
              strokeWeight: 0.25,   
              fillColor: "#FFFFFF",
              geodesic: true,
              zIndex: 10001
            });

        cadre.setMap(map);   

                 
        
        var nbL= parseInt(vSlices);
        for (var i = 1; i<=nbL; i++) {
           var lineCoord = [
              google.maps.geometry.spherical.interpolate( grid.NW, grid.NE, i/(nbL+1) ),
              google.maps.geometry.spherical.interpolate( grid.SW, grid.SE, i/(nbL+1) )
            ]

            var slicePath = new google.maps.Polyline({
              path: lineCoord,
              strokeColor: "#FF0000",
              strokeOpacity: 1.0,
              strokeWeight: 1,
              geodesic: true,
              zIndex: 10001
            });

            slicePath.setMap(map);   
            slices.push(slicePath);
            slicesData.push({
              type: 'vertical',
              index: i,
              path: lineCoord
              
            });

           }


        nbL= parseInt(hSlices);
        for (var i = 1; i<=nbL; i++) {
           var lineCoord = [
              google.maps.geometry.spherical.interpolate(grid.NW, grid.SW, i/(nbL+1) ),
              google.maps.geometry.spherical.interpolate(grid.NE, grid.SE, i/(nbL+1) )
            ]

            var slicePath = new google.maps.Polyline({
              path: lineCoord,
              strokeColor: "#FF0000",
              strokeOpacity: 1.0,
              strokeWeight: 1,
              geodesic: true,
              zIndex: 10001
            });

            slicePath.setMap(map);   
            slices.push(slicePath);
            slicesData.push({
              type: 'horizontal',
              index: i,
              path: lineCoord              
            });

           }     





    grid.clear= function() {

        if (cadre!=null) cadre.setMap(null);
        for (var i = slices.length - 1; i >= 0; i--) {
            slices[i].setMap(null);
          };
        slices.length = 0;

	}



    grid.setOptions= function( newoptions ) {
		for (var i = slices.length - 1; i >= 0; i--) {
            slices[i].setOptions( newoptions )
          };
    }


    grid.getBounds=function() {
    	return new google.maps.LatLngBounds( grid.SW,grid.NE );
      // erreur il faut ajouter l autre bounds
    }


    grid.getData=function() {
    	return slicesData;
    }  

    grid.getArray=function() {
      res=[];

      nbL= parseInt(hSlices);
        for (var i = 0; i<=nbL; i++) {
              pt1=google.maps.geometry.spherical.interpolate(grid.NW, grid.SW, i/(nbL+1) );
              pt2=google.maps.geometry.spherical.interpolate(grid.NE, grid.SE, i/(nbL+1) );
              var nbC= parseInt(vSlices);
              for (var n = 0; n<=nbC; n++) 
                res.push( google.maps.geometry.spherical.interpolate(pt1, pt2, n/(nbC+1) ) );
        } 

      return res;
    }

  	
	return grid
}$(function() {


  /*******************/
 /*   initBloc      */
/*******************/

  Georigami.initBloc = function(view) {


    var updateParams=function(face,vscale){

      if (face===null)   face=getBlocFace();
      if (vscale===null) vscale=getBlocVScale();
      blocid= $('#blocinfo').data( 'id' );

      var new_url= 'bloc' + blocid + '_' + $('#blocinfo').data( 'view' ) + '?vscale=' + vscale + '&face=' + face ;
      if (Modernizr.history) history.replaceState(null, null, new_url);


      $('input[name=face]').val(face);

      $('#facepicker a').each(function(){
        $(this).attr('href','?vscale='+vscale+'&face='+ $(this).data('face'));
      });

      $('#bloc-menu a').each(function(){
        var action=$(this).data('action');
        if (action!==null)
          $(this).attr('href', 'bloc' + blocid + '_' + action + '?vscale=' + vscale + '&face=' + face);
      });

      $('#blocinfo img.bloc-face').attr('src',Georigami.baseurl+'svg/'+Math.floor(blocid/100)+'/bloc' + blocid + face + '.svg');

    };




    var setBlocFace=function(face) { $('#blocinfo').data( 'face',face );          updateParams( face, null );     };
    var getBlocFace=function() { return $('#blocinfo').data( 'face' ); };
    var setBlocVScale=function(vscale) { $('#blocinfo').data( 'vscale',vscale );  updateParams(  null, vscale );  };
    var getBlocVScale=function() { return $('#blocinfo').data( 'vscale' ); };

















/* view == 3D */

    if (view=='3d') {

      var view3D= load3D( Georigami.bloc, $('.div3Dview'), $('.vs-input').val() );

     var viewFace= function(face) {
        if (face=='W') view3D.setRotation(Math.PI/2);
        if (face=='N') view3D.setRotation(Math.PI);
        if (face=='E') view3D.setRotation(3*Math.PI/2);
        if (face=='S') view3D.setRotation(0);
        if (face=='doabarrelroll') view3D.setRotation(6*Math.PI/2);
      };

      viewFace( getBlocFace() );


    $('#facepicker a').each(function(){
      $(this).click(function(){
        var face=$(this).data('face');
        viewFace( face );
        setBlocFace( face );
        $('#facepicker a.active').removeClass('active');
        $(this).addClass('active');
        return false;
      });
    });


    $('.vs-input').change(function(){
      var vscale=$(this).val();
      view3D.setVerticalScale( vscale );
      setBlocVScale( vscale );
      return false;
    });


    $('.vs-update').hide();

  }
































/* view == profil */
 if (view=='profil') {

  $('.vs-update').hide();





  var profil=function( svgobj, data, option ) {

    if (option===null)    option={};
    if (option.dx===null) option.dx=0;
    if (option.dy===null) option.dy=0;
    if (option.dscale===null) option.dscale=0;
    if (option.vscale===null) option.vscale=1;

    profilobj=option;

    profilobj.changeStyle= function(newstyle) {
      svgobj.attr('class',newstyle);
    };


    profilobj.setSlicesTransform= function(dx,dy,dscale) {

      var slCount=  svgobj.find('g.gslice').length;
      var x;
      var y;
      var scale;

      var mouseXOnMouseDown;
      var mouseYOnMouseDown;

      profilobj.dx=dx;
      profilobj.dy=dy;
      profilobj.dscale=dscale;

      for (var id = 0; id< slCount; id++) {
        var obj=  svgobj.find('#slice'+id);
        var obj2= obj.find('g.gscale');

        scale= 1- profilobj.dscale * (((slCount-1)-id)/slCount);
        x= (id-slCount/2) * profilobj.dx;
        y= (id-slCount/2) * profilobj.dy;

        obj[0].setAttribute("transform",  "translate("+x+","+y+")");
        obj2[0].setAttribute("transform", "scale("+scale+")");
     }

     updateViewBox();

    };



     profilobj.onDocumentMouseDown= function( event ) {
        event.preventDefault();

       // svgobj[0].setAttribute("shape-rendering","crispEdges"); //optimize speed

        svgobj[0].addEventListener( 'mousemove', profilobj.onDocumentMouseMove, false );
        svgobj[0].addEventListener( 'mouseup', profilobj.onDocumentMouseUp, false );

        mouseXOnMouseDown = event.clientX ;
        mouseYOnMouseDown = event.clientY ;

      };

      profilobj.onDocumentMouseMove= function( event ) {

        mouseX = event.clientX ;
        mouseY = event.clientY ;

        profilobj.updateDxDy( (mouseX-mouseXOnMouseDown) /3000, (mouseY-mouseYOnMouseDown) /3000 );

      };

      profilobj.onDocumentMouseUp= function( event ) {
        //svgobj[0].setAttribute("shape-rendering", "geometricPrecision" );
        svgobj[0].removeEventListener( 'mousemove', profilobj.onDocumentMouseMove, false );
        svgobj[0].removeEventListener( 'mouseup', profilobj.onDocumentMouseUp, false );
        svgobj[0].removeEventListener( 'mouseout', profilobj.onDocumentMouseOut, false );

      };

      profilobj.onDocumentMouseOut= function( event ) {
        //svgobj[0].setAttribute("shape-rendering", "geometricPrecision" );
        svgobj[0].removeEventListener( 'mousemove', profilobj.onDocumentMouseMove, false );
        svgobj[0].removeEventListener( 'mouseup', profilobj.onDocumentMouseUp, false );
        svgobj[0].removeEventListener( 'mouseout', profilobj.onDocumentMouseOut, false );

      };

      profilobj.mousewheel= function( event ) {

          event.preventDefault();
          event.stopPropagation();

          var delta = 0;
          if ( event.wheelDelta ) { // WebKit / Opera / Explorer 9
            delta = event.wheelDelta / 40;
          } else if ( event.detail ) { // Firefox
            delta = - event.detail / 3;
          }

          profilobj.updateDScale(delta/100);
      };


      svgobj[0].addEventListener( 'mousedown', profilobj.onDocumentMouseDown , false );
      svgobj[0].addEventListener( 'mousewheel', profilobj.mousewheel, false );
      svgobj[0].addEventListener( 'DOMMouseScroll', profilobj.mousewheel, false ); // firefox




    var updateCoords= function() {

      var svg_vscale= Georigami.svg_hscale*profilobj.vscale;

      for (var id =0, len= data.coords.length; id < len; id++) {
        var slObj= svgobj.find('#slice'+id);


        var coord='';
        for (var idCoord=0, lenCoord=data.coords[id].c.length; idCoord<lenCoord; idCoord++ ) {

          var c=data.coords[id].c[idCoord];
          coord= coord+ ((c[0]-data.dim/2)*Georigami.svg_hscale)+ ',' + (-c[1]*svg_vscale) + ',';
        }

        slObj.find('polyline')[0].setAttribute("points", coord );
        slObj.find('polygon')[0]. setAttribute("points", coord + (data.dim/2)*Georigami.svg_hscale + "," + (0)*svg_vscale + "," + (-(data.dim/2)*Georigami.svg_hscale) + "," + ((0)*svg_vscale) );


      }

      updateViewBox();
    };





    var updateViewBox= function() {
      var viewbox= { 'left':10000, 'right':-10000, 'top':10000, 'bottom':-10000 };
      var svg_vscale= Georigami.svg_hscale*profilobj.vscale;

      for (var id =0, len= data.coords.length; id < len; id++) {


       var SCALE= 1-profilobj.dscale*(((len-1)-id)/len);

       var bottom= (id-len/2) *profilobj.dy + data.max*Georigami.svg_hscale;
       var top=    (id-len/2) *profilobj.dy + data.max*Georigami.svg_hscale - data.coords[id].m*svg_vscale*SCALE;


        var left=   (id-len/2) *profilobj.dx + data.dim/2*Georigami.svg_hscale - data.dim/2*Georigami.svg_hscale*SCALE;
        var right=  (id-len/2) *profilobj.dx + data.dim/2*Georigami.svg_hscale + data.dim/2*Georigami.svg_hscale*SCALE;

        if ( top < viewbox.top )        viewbox.top= top;
        if ( bottom > viewbox.bottom )  viewbox.bottom= bottom;

        if ( left < viewbox.left )      viewbox.left= left;
        if ( right > viewbox.right )    viewbox.right=right;
      }

     //marge 5%
      var width=  viewbox.right - viewbox.left;
      var height= viewbox.bottom - viewbox.top;

      viewbox.left=   viewbox.left  - width*0.05;
      viewbox.right=  viewbox.right + width*0.05;

      viewbox.top=    viewbox.top    - height*0.05;
      viewbox.bottom= viewbox.bottom + height*0.05;

      var VB= viewbox.left + ' ' + viewbox.top + ' ' + (viewbox.right-viewbox.left) + ' ' + (viewbox.bottom-viewbox.top);
      svgobj[0].setAttribute( 'viewBox', VB );

    };




    profilobj.updateVScale= function(value) {
      profilobj.vscale= value;
      updateCoords();
    };

    profilobj.updateDxDy= function(dx,dy) {
      $('#input-translateX').val( $('#input-translateX').val()*1+dx );
      $('#input-translateY').val( $('#input-translateY').val()*1+dy );
      $('#input-translateX').trigger('change');
      $('#input-translateY').trigger('change');
    };

    profilobj.updateDScale= function(dscale) {
      $('#input-scale').val( $('#input-scale').val()*1+dscale );
      $('#input-scale').trigger('change');
    };



    return profilobj;
  }; // fin profil






  var profilObj= profil( $('#svgprofil'), Georigami.profil, {
    'vscale': $('.vs-input').val(),
    'dx':     $('#input-translateX').val(),
    'dy':     $('#input-translateY').val(),
    'dscale': $('#input-scale').val()
  });



  $('#styleswicther').change(     function(){ profilObj.changeStyle( $(this).val() ); updateUrls(); });
  $('#input-translateX').change(  function() { updateSlicesTransform(); });
  $('#input-translateY').change(  function() { updateSlicesTransform(); });
  $('#input-scale').change(       function() { updateSlicesTransform(); });

  $('.vs-input').change(          function() { profilObj.updateVScale( $(this).val() ); updateUrls(); });



var updateSlicesTransform= function() {
  var dX= parseFloat( $('#input-translateX').val() );
  var dY= parseFloat( $('#input-translateY').val() );
  var dscale= parseFloat( $('#input-scale').val() );
  profilObj.setSlicesTransform(dX,dY,dscale);
  updateUrls();
};


var updateUrls=function(){
      var face=   $('#input-face').val();
      var vscale= $('.vs-input').val();
      var dx=     $('#input-translateX').val();
      var dy=     $('#input-translateY').val();
      var dscale= $('#input-scale').val();
      var style=  $('#styleswicther').val();
      var blocid= $('#blocinfo').data( 'id' );

      var new_url= 'bloc' + blocid + '_' + $('#blocinfo').data( 'view' ) + '?vscale=' + vscale + '&face=' + face  + '&dx=' + dx  + '&dy=' + dy  + '&dscale=' + dscale  + '&style=' + style  ;
      if (Modernizr.history) history.replaceState(null, null, new_url);


      $('#facepicker a').each(function(){
        $(this).attr('href','?vscale='+vscale+'&face='+ $(this).data('face')+ '&dx=' + dx  + '&dy=' + dy  + '&dscale=' + dscale  + '&style=' + style );
      });

      $('#bloc-menu a').each(function(){
        var action=$(this).data('action');
        if (action!==null)
          $(this).attr('href', 'bloc' + blocid + '_' + action + '?vscale=' + vscale + '&face=' + face  );
      });

      $('#profildownload').attr('href', 'bloc' + blocid + '_download' + '?vscale=' + vscale + '&face=' + face  + '&dx=' + dx  + '&dy=' + dy  + '&dscale=' + dscale  + '&style=' + style   );

    };



}


}; // end initBloc








});$(function() {



/*******************/
 /*   initLocation    */
/*******************/

  Georigami.initLocation = function() {


  function createGrid(map, data, marker) {
    var gridObj=grid(map,data.lat,data.lng,data.width,data.height,data.vslices,data.hslices,data.rotate);
      google.maps.event.addListener(marker, "mouseover", function() {
        gridObj.setOptions( { strokeColor: "#00FF00"  } );
      });

      google.maps.event.addListener(marker, "mouseout", function() {
        gridObj.setOptions( { strokeColor: "#FF0000"  } );
      });
    return gridObj;
  }




     //initmap

    var Loc=new google.maps.LatLng (Georigami.location.lat , Georigami.location.lng );
    var mapOptions = {
        center: Loc,
        zoom: 1,
        mapTypeId: google.maps.MapTypeId.TERRAIN
      };

    map = new google.maps.Map(document.getElementById("map-canvas2"), mapOptions);


    var markers = [];
    var bounds = new google.maps.LatLngBounds ();
    bounds.extend(Loc);

    for (var i = 0; i < Georigami.location.blocs.length; i++) {
      var data=Georigami.location.blocs[i];
      var latLng = new google.maps.LatLng( data.lat,data.lng );
      bounds.extend(latLng);


      var html='<a href="'+Georigami.baseurl+Georigami.lang+'/'+Georigami.location.name+'_'+Georigami.location.id+'/bloc'+data.id+'">'; //TODO! style in  css

        //html =html+data.lat+', '+data.lng+'<br/>';



        html =html+'<img src="'+Georigami.baseurl+'svg/'+Math.floor(data.id/100)+'/bloc'+data.id+'N.svg" title="'+Lang.nface+'" width="64px">'; //TODO! style in  css
        html =html+'<img src="'+Georigami.baseurl+'svg/'+Math.floor(data.id/100)+'/bloc'+data.id+'W.svg" title="'+Lang.wface+'" width="64px">';
        html =html+'<img src="'+Georigami.baseurl+'svg/'+Math.floor(data.id/100)+'/bloc'+data.id+'S.svg" title="'+Lang.sface+'" width="64px">';
        html =html+'<img src="'+Georigami.baseurl+'svg/'+Math.floor(data.id/100)+'/bloc'+data.id+'E.svg" title="'+Lang.eface+'" width="64px">';

        html =html+'<br/>';

        html =html+Lang.altitude(Math.round(data.min),Math.round(data.max))+'<br/>';
        html =html+data.width+'m x '+data.height+'m<br/>';
        html =html+Lang.rotation+': '+data.rotate+'°<br/>';
        html =html+Lang.slices+': '+data.vslices+' x '+data.hslices+'<br/>';
        html =html+Lang.samples+': '+(data.vslices*data.vsamples+data.hslices*data.hsamples)+'<br/>';

        html =html+'</a>';


        var marker = createMarker( html , new google.maps.LatLng(data.lat,data.lng), Georigami.baseurl+'img/ico/'+Georigami.location.icon+'.png', Georigami.baseurl+'img/ico/shadow.png' );

      gridObj=createGrid(map, data, marker);
      bounds.union( gridObj.getBounds() );

    }

    map.fitBounds (bounds);

  }


});$(function() {

  /*******************/
 /*   initMap       */
/*******************/

  Georigami.initMap = function() {

     //initmap
    var mapOptions = {
        center: new google.maps.LatLng (0 , 0 ),
        zoom: 2,
        mapTypeId: google.maps.MapTypeId.TERRAIN
      };

    map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);



    google.maps.event.addListener(map, 'click', function(event) {



        var html= 'lat: '+event.latLng.lat()+'<br/>lng: '+event.latLng.lng()+'<br/><br/>';
        html= html+'<a href="'+Georigami.baseurl+'new?lat='+event.latLng.lat()+'&lng='+event.latLng.lng()+'" class="btn btn-primary btn-small"/>'+Lang.buildanew+'</a>';

        if (infowindow) infowindow.close();
         infowindow = new google.maps.InfoWindow({content: html, position:new google.maps.LatLng( event.latLng.lat() , event.latLng.lng() ) });
         infowindow.open(map);

        });


    google.maps.event.addListener(map, 'zoom_changed', function() {

      if (( map.zoom>15 )&&( map.getMapTypeId()==google.maps.MapTypeId.TERRAIN )) map.setMapTypeId( google.maps.MapTypeId.ROADMAP );

      if ( map.zoom>19 ) map.setMapTypeId( google.maps.MapTypeId.ROADMAP );

      if (map.zoom<=15) map.setMapTypeId( google.maps.MapTypeId.TERRAIN );

    });


    var markers = [];
    for (var i = 0; i < Georigami.location_list.length; i++) {
      var data=Georigami.location_list[i];
      var latLng = new google.maps.LatLng( data.lat,data.lng );

      if (data.name=='unknown place') data.name=data.adminname4;
      if (data.name=='') data.name=data.adminname3;
      if (data.name=='') data.name=Lang.unnamed;

      var html='<a href="'+data.url+'"><h3 title="'+data.feature+'">'+data.name+'</h3><img src="'+Georigami.baseurl+'img/flags/'+data.countrycode.toLowerCase()+'.png" title="'+data.countryname+'"/> <span class="countryname">'+data.countryname+'</span> '+data.adminname1+'<br/>';
      for (var j = 0; j < data.blocs.length; j++) {
        var bloc=data.blocs[j];
        html =html+'<div>';
        html =html+'<img src="'+Georigami.baseurl+'svg/'+Math.floor(bloc.id/100)+'/bloc'+bloc.id+'N.svg" title="'+Lang.nface+'" width="64px">'; //TODO! style in  css
        html =html+'<img src="'+Georigami.baseurl+'svg/'+Math.floor(bloc.id/100)+'/bloc'+bloc.id+'E.svg" title="'+Lang.eface+'" width="64px">';
        html =html+'<img src="'+Georigami.baseurl+'svg/'+Math.floor(bloc.id/100)+'/bloc'+bloc.id+'S.svg" title="'+Lang.sface+'" width="64px">';
        html =html+'<img src="'+Georigami.baseurl+'svg/'+Math.floor(bloc.id/100)+'/bloc'+bloc.id+'W.svg" title="'+Lang.wface+'" width="64px">';

        html =html+'</div>';
        html =html+'</a>';
        }
       // TODO

      var marker = createMarker( html , new google.maps.LatLng(data.lat,data.lng), Georigami.baseurl+'img/ico/'+data.icon+'.png', Georigami.baseurl+'img/ico/shadow.png');

      markers.push(marker);
    }

    var mcOptions = {gridSize: 50, maxZoom: 15 };
    var mapCluster = new MarkerClusterer(map, markers, mcOptions);

  };


});$(function() {

  Georigami.status=null;




  var showLoading= function(content, pp) {
      $('#status .text').html(content);
      if (pp!==undefined) {
          if (!$('#status .progress').length) $('<div class="progress progress-striped active"><div class="bar" style="width: '+(pp*100)+'%;"></div></div>').appendTo( $('#status') );
          else $('#status .progress .bar').css('width',(pp*100)+'%');

        }
        else $('#status .progress').remove();

  };


  /*******************/
 /*   initNew       */
/*******************/

  Georigami.initNew = function() {

    var gridObj=null;






 Georigami.setStatus= function (status) {

  if (status=='ready') {
    $('#start-btn').removeClass('disabled');
    $('#cancel-btn').addClass('disabled');
  }
  else
  {
    $('#start-btn').addClass('disabled');
  }

  if (status=='loading')  $('#cancel-btn').removeClass('disabled');

  Georigami.status=status;
 };




Georigami.setStatus(null);


$('#input-search').change( function(){

  var req=$('#input-search').val();

  if (req==='') {
    $('#search-result').html('');
    return false;
  }

  $('#search-result').html('<i class="loading"></i> '+Lang.searching);

  $.ajax({
                url: Georigami.baseurl+"/search",
                type: "POST",
                data: {q:$('#input-search').val()},
                success: function(data){

                 $('#search-result').html('');

                 if (data.geonames.length>0) $('#search-result').html('<ul></ul>');
                  else $('#search-result').html('<div class="alert alert-error">'+Lang.noresultfor+$('#input-search').val()+'</div>'); //TODO

                 for (var i = 0; i< data.geonames.length; i++) {
                    var html='<li><a href="#" data-lat="'+data.geonames[i].lat+'" data-lng="'+data.geonames[i].lng+'">';
                    if (data.geonames[i].countryCode!=undefined) html=html+'<img src="'+Georigami.baseurl+'img/flags/'+ data.geonames[i].countryCode.toLowerCase()+'.png" title="'+data.geonames[i].countryName+'"/> ';
                    html=html+data.geonames[i].name;
                    if ((data.geonames[i].adminName1!=undefined)&&(data.geonames[i].adminName1!='')) html=html+' ('+data.geonames[i].adminName1+')';
                    html=html+'</a></li>';

                    $(html).appendTo( $('#search-result>ul') );
                 }

                 $('#search-result a').on("click", function(){

                    $('#input-latitude').val(  $(this).data("lat") );
                    $('#input-longitude').val( $(this).data("lng") );

                    Georigami.update();

                    return false;
                  });


                }
              });
  return false;
});





    var slices=[];
    var slicesData=[];
    var cadre=null;
    var requestDelay=4000; // best for 5000

    Georigami.results=[];

    //initmap
    var mapOptions = {
        center: new google.maps.LatLng (Georigami.area.lat , Georigami.area.lng ),
        zoom: 2,
        mapTypeId: google.maps.MapTypeId.TERRAIN
      };

    var map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);





    var updateForm= function() {
      $('#input-latitude').val(  Georigami.rectangle.lat );
      $('#input-longitude').val( Georigami.rectangle.lng );
      $('#input-width').val(  Georigami.rectangle.width );
      $('#input-height').val( Georigami.rectangle.height );
      drawSlices(  getParams()  );


    };




    var getParams= function() {
      var res={};
      res.lat= parseFloat( $('#input-latitude').val() );
      res.lng= parseFloat( $('#input-longitude').val() );
      res.width= parseFloat( $('#input-width').val() );
      res.height= parseFloat( $('#input-height').val() );
      res.vSlices= parseFloat( $('#input-vertical-slices').val() );
      res.hSlices= parseFloat( $('#input-horizontal-slices').val() );
      res.vSampling= parseFloat( $('#input-vsampling').val() );
      res.hSampling= parseFloat( $('#input-hsampling').val() );
      res.rotate= parseFloat( $('#input-rotate').val() );

      res.vSamples= res.vSampling* (res.hSlices+1) + 1;
      $('#input-vertical-samples').val(res.vSamples);

      res.hSamples= res.hSampling* (res.vSlices+1) + 1;
      $('#input-horizontal-samples').val(res.hSamples);


      res.bbox= Georigami.rectangle.getBounds(true);

       if ((Georigami.rectangle.lat!==0)||(Georigami.rectangle.lng!==0)) {
          if (Georigami.status!='loading') Georigami.setStatus('ready');
       }

      return res;
    };



    var initParams= function(params) {
      $('#input-latitude').val( params.lat );
      $('#input-longitude').val( params.lng );
      $('#input-width').val( params.width );
      $('#input-height').val( params.height );
      $('#input-vertical-slices').val( params.vSlices );
      $('#input-horizontal-slices').val( params.hSlices );
      $('#input-hsampling').val( params.hsampling );
      $('#input-vsampling').val( params.vsampling );
      $('#input-rotate').val( params.rotate );
      $('input').trigger('change');
    };





  var drawSlices= function(params) {
    if (gridObj!==null) gridObj.clear();
    gridObj= grid(map,params.lat,params.lng,params.width,params.height,params.vSlices,params.hSlices,params.rotate);
  };

  Georigami.update= function() {
        Georigami.rectangle.updateCenter( $('#input-latitude').val() , $('#input-longitude').val() );
        Georigami.rectangle.updateDimensions( $('#input-width').val() , $('#input-height').val() );
        drawSlices( getParams() );
        map.fitBounds(Georigami.rectangle.getBounds());
    };



    //init params
    initParams(Georigami.area);

    Georigami.rectangle= draggableRectangle(map, Georigami.area.lat , Georigami.area.lng, Georigami.area.width, Georigami.area.height, {
        onChange: updateForm
      });

    updateForm();
    if ((Georigami.area.lat!==0)||(Georigami.area.lng!==0)) Georigami.update();






    $('.livechange').keypress( function(){    setTimeout('Georigami.update()',1);    });
    $('.livechange').mouseup( function(){     Georigami.update();    });
    $('.livechange').change( function(){     Georigami.update();    });


    $('#update-btn').mousedown( function(){
        Georigami.update();
        return false;
    });

    $('#paramform').submit( function(){
        return false;
    });






    var buildSlices= function(result) {

      var data=result.params;

      data.vSlicesObj=[];
      data.hSlicesObj=[];
      data.min= Infinity;
      data.max= -Infinity;
      var x,y,z;
      var maxDim= Math.max(data.width,data.height);

      // get min and max
      for (var i = 0; i< result.slices.length; i++)
        for (var n = 0; n< result.slices[i].data.length; n++) {
          z=result.slices[i].data[n].elevation;
          if (z<data.min) data.min=z;
          if (z>data.max) data.max=z;
        }

      for ( i = 0; i< result.slices.length; i++) {
        var s=result.slices[i];
        var sCoords=[];
        for (var n = 0; n< s.data.length; n++) {
          z=s.data[n].elevation;
          if (s.type=='vertical')
            x= n/(s.data.length-1)*data.height/maxDim;
          else
            x= n/(s.data.length-1)*data.width/maxDim;
          y=(z-data.min)/maxDim;
          sCoords.push([x,y]);
        }

        if (s.type=='vertical') {
          data.vSlicesObj.push(sCoords);
        }
        else {
          data.hSlicesObj.push(sCoords);
        }

      }

      data.vSlicesObj= data.vSlicesObj.reverse();

      return data;

    };





    Georigami.loadSlice= function(result,i) {
      var slice=result.slices[i];
      var pathstr='';
      var samples;
      showLoading( Lang.loadingslice((i+1),result.slices.length), (i+1)/result.slices.length );


      var path=[];
      $.each( slice.path, function(i2, pt) {
            if (pathstr!=='') pathstr=pathstr+'|';
            pathstr=pathstr+pt.lat()+','+pt.lng();
            path.push( new google.maps.LatLng( pt.lat() , pt.lng() ) );
        });

      if (slice.type=='vertical') samples=result.params.vSamples;
        else samples=result.params.hSamples;


       var pathRequest={
            'path': path,
            'samples': samples
          };

      if (Georigami.status!='cancel') {
        elevator = new google.maps.ElevationService();
        elevator.getElevationAlongPath(pathRequest, plotElevation);
      }
      else {
        showLoading('');
        Georigami.setStatus('ready');
      }

       function plotElevation(results, status) {
           if (status!='OK') {
            Georigami.alert('GOOGLE ELEVATION API ERROR',status );
            showLoading('');
            Georigami.setStatus('ready');
            return;
          }

          slice.data=results;

          if (i+1<result.slices.length) setTimeout(function(){ Georigami.loadSlice(result,i+1);}, requestDelay*(samples/500)  ); // too be kind with google api
            else {

              post=buildSlices(result);
              post.coords=JSON.stringify( {'v':post.vSlicesObj, 'h':post.hSlicesObj } );
              delete post.vSlicesObj;
              delete post.hSlicesObj;

              showLoading( Lang.loading );
              $.ajax({
                url: Georigami.baseurl+Georigami.lang+'/new',
                type: "POST",
                data: post,
                success: function(data){


                  var visu= visuSlice( Georigami.results.length+1, data, $('#resultats') );
                  Georigami.results.push( { data:data } );
                  showLoading( '' );

                  }
                });

              }
       };

    };






    $('#start-btn').click( function(){
      if (Georigami.status=='ready') {
          var data={params:getParams(),slices:gridObj.getData() };
          startWork( data );
          Georigami.setStatus('loading');
        }
        else
          if (Georigami.status=='loading') Georigami.alert('Please wait', 'Work in progress');
            else Georigami.alert('but where ?', 'Please select an area');
        return false;
     });


    $('#cancel-btn').click( function(){
      if (Georigami.status=='loading') {
        Georigami.setStatus('cancel');
      }
    });





var startWork= function(data) {
    $('.div3Dview').hide();
    Georigami.setStatus('loading');
    Georigami.loadSlice(data,0);
}







}; //fin init

  /********************/
  /*     visuSlice    */
  /********************/



  var visuSlice= function(id,data,obj) {
    Georigami.setStatus('ready');

    var html='<div class="result">'+
      '<p class="index">result '+id+'</p>'+
      '<a href="'+data.location.url+'"><img src="'+Georigami.baseurl+'img/flags/'+data.location.countrycode.toLowerCase()+'.png" title="'+data.location.countryname+'"/> <span class="countryname">'+data.location.countryname+'</span><br/>'+data.location.name+'</a></td></tr>'+
      '<div class="row">'+
        '<a href="'+data.url+'">'+
          '<img src="'+Georigami.baseurl+'svg/'+Math.floor(data.id/100)+'/bloc'+data.id+'N.svg" class="span2" title="'+Lang.nface+'"/>'+
          '<img src="'+Georigami.baseurl+'svg/'+Math.floor(data.id/100)+'/bloc'+data.id+'E.svg" class="span2" title="'+Lang.eface+'"/>'+
          '<img src="'+Georigami.baseurl+'svg/'+Math.floor(data.id/100)+'/bloc'+data.id+'S.svg" class="span2" title="'+Lang.sface+'"/>'+
          '<img src="'+Georigami.baseurl+'svg/'+Math.floor(data.id/100)+'/bloc'+data.id+'W.svg" class="span2" title="'+Lang.wface+'"/>'+
          '<div class="span2">'+
          Lang.altitude(Math.round(data.min),Math.round(data.max))+'<br/>'+
          data.width+'m x '+data.height+'m<br/>'+
          Lang.rotation+': '+data.rotate+'°<br/>'+
          Lang.slices+': '+data.vslices+' x '+data.hslices+'<br/>'+
          Lang.samples+': '+(data.vslices*data.vsamples+data.hslices*data.hsamples)+'<br/>'+
            data.created_at_localized+
          '</div>'+
        '</a>'+
      "</div>"+
      //'<div class="div3Dview"></div>'+
      '</div>';



    var bloc=$(html).prependTo(obj);
    //var view3D= load3D( data, bloc.find('.div3Dview'), Georigami.verticalScale );

  };



});$(function() {


	defaultParam= function( var_name, default_value) {
		return (typeof var_name === "undefined") ? default_value : var_name;
	};



	Georigami.alert= function(title,html) {



		html='<div id="myModal" class="modal hide fade alert-error" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">'+
			'<div class="modal-header">'+
				'<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>'+
				'<h3 id="myModalLabel">'+title+'</h3>'+
			'</div>'+
			'<div class="modal-body">'+
				html+
			'</div>'+
			'<div class="modal-footer">'+
				'<button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>'+
			'</div>'+
		'</div>';

		$(html).modal('show');
	}





	$('input[type="number"]').each( function(k,obj){
		if (obj.type!='number') {
			var target=$(this);
			target.spinner();
			target.on('spin', function(event,ui) { setTimeout( function() { target.trigger('change'); },1); });

		}
	});





	$('input[type="range"]').each( function(k,obj){
		var target=$(this);

		if (obj.type=='range') { //HTML5
			var step=obj.step;
			if (null===step) step=1;

			var divnumber= $('<input type="number" value="'+target.val()+'" min="'+obj.min+'" max="'+obj.max+'" step="'+step+'" class="'+target.attr('class')+'"></div>').insertAfter(target);
			$('<br/>').insertAfter(target);
			target.removeClass().change(function(){
				divnumber.val( target.val() );
			});

			divnumber.change(function() {	target.val( divnumber.val() ); target.trigger('change');	});
			divnumber.keypress(function() {	setTimeout( function() {target.val( divnumber.val() )},1);	});

		}
		else // jqueryUI
		{
			obj.type='number';

			var divslider= $('<div class="slider"></div>').insertBefore(target);
			var step=obj.step;
			if (step==null) step=1;
			step=parseFloat(step);

			var slider= divslider.slider({
				value: 	parseFloat(target.val()),
				min: 	parseFloat(obj.min),
				max: 	parseFloat(obj.max),
				step:   step,

				slide:  function( event, ui ) {
					target.val( ui.value );
					target.trigger('change');
				}

			});

			target.change(function() {	divslider.slider( "option", "value", target.val() );	});
			target.keypress(function() {	setTimeout( function() {divslider.slider( "option", "value", target.val() ) },1);	});
		}
	});









  if(typeof Georigami == 'undefined') Georigami={};
	//Georigami.verticalScale=1;



	// INIT


	$('.tip').tooltip({placement:'top', delay:{show:2000, hide:0}, trigger: 'hover'});
	if ($('body').hasClass('bloc3d')) Georigami.initBloc('3d');
	if ($('body').hasClass('print')) Georigami.initBloc('print');
	if ($('body').hasClass('profil')) Georigami.initBloc('profil');

	if ($('body').hasClass('location')) Georigami.initLocation();
	if ($('body').hasClass('map')) Georigami.initMap();
	if ($('body').hasClass('new')) Georigami.initNew();
	if ($('body').hasClass('welcome')) Georigami.initWelcome();



	//reload cropped svg ( usefull with chrome )
	setTimeout(function(){		$('body.savedindex img.profil').width( function(){ return $(this).width()-1; } );		},500	);
	setTimeout(function(){		$('body.savedindex img.profil').width( function(){ return $(this).width()+1; } );		},510	);



});
